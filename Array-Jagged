// C# program to illustrate the declaration  
// and Initialization of Jagged Arrays 
using System; 
  
class DemoTMT { 
      
    // Main Method 
    public static void Main() 
    { 
          
        // Declare the Jagged Array of four elements: 
        int[][] jagged_arr = new int[4][]; 
  
        // Initialize the elements 
        jagged_arr[0] = new int[] {1, 2, 3, 4}; 
        jagged_arr[1] = new int[] {11, 34, 67}; 
        jagged_arr[2] = new int[] {89, 23}; 
        jagged_arr[3] = new int[] {0, 45, 78, 53, 99}; 
  
        // Display the array elements: 
        for (int n = 0; n < jagged_arr.Length; n++) { 
  
            // Print the row number 
            System.Console.Write("Row({0}): ", n); 
  
            for (int k = 0; k < jagged_arr[n].Length; k++) { 
  
                // Print the elements in the row 
                System.Console.Write("{0} ", jagged_arr[n][k]); 
            } 
            System.Console.WriteLine(); 
        } 
    } 
} 



// C# program to illustrate the Mixing of 1-D 
// Jagged Array with the four 2-D array 
using System; 
namespace JaggedArray { 
      
class DemoTMT { 
      
// Main Method 
public static void Main() 
{ 
  
    // Declaration and Initialization of  
    // Jagged array with 4 2-D arrays 
    int[][, ] jagged_arr1 = new int[4][, ] {new int[, ] {{1, 3}, {5, 7}}, 
                                    new int[, ] {{0, 2}, {4, 6}, {8, 10}}, 
                                    new int[, ] {{7, 8}, {3, 1}, {0, 6}}, 
                                    new int[, ] {{11, 22}, {99, 88}, {0, 9}}}; 
  
    // Display the array elements: 
    // Length method returns the number of 
    // arrays contained in the jagged array 
    for (int i = 0; i < jagged_arr1.Length; i++) 
    { 
          
        int x = 0; 
          
        // GetLength method takes integer x which  
        // specifies the dimension of the array 
        for (int j = 0; j < jagged_arr1[i].GetLength(x); j++)  
        { 
              
            // Rank is used to determine the total  
            // dimensions of an array  
            for (int k = 0; k < jagged_arr1[j].Rank; k++) 
                Console.Write("Jagged_Array[" + i + "][" + j + ", " + k + "]: "
                                            + jagged_arr1[i][j, k] + " "); 
            Console.WriteLine(); 
        } 
        x++; 
        Console.WriteLine(); 
    } 
} 
} 
} 
