// C# program to illustrate how to  
// create an anonymous function 
using System; 
  
class DemoTMT { 
  
    public delegate void petanim(string pet); 
  
    // Main method 
    static public void Main() 
    { 
  
        // An anonymous method with one parameter 
        petanim p = delegate(string mypet) 
        { 
            Console.WriteLine("My favorite pet is: {0}", 
                                                 mypet); 
        }; 
        p("Dog"); 
    } 
} 




// C# program to illustrate how an  
// anonymous function access variable 
// defined in outer method 
using System; 
  
class DemoTMT { 
  
    // Create a delegate 
    public delegate void petanim(string pet); 
  
    // Main method 
    static public void Main() 
    { 
  
        string fav = "Rabbit"; 
  
        // Anonymous method with one parameter 
        petanim p = delegate(string mypet) 
        { 
            Console.WriteLine("My favorite pet is {0}.", 
                                                 mypet); 
  
            // Accessing variable defined 
            // outside the anonymous function 
            Console.WriteLine("And I like {0} also.", fav); 
        }; 
        p("Dog"); 
    } 
} 



// C# program to illustrate how an  
// anonymous method passed as a parameter 
using System; 
  
public delegate void Show(string x); 
  
class DemoTMT { 
  
    // identity method with two parameters 
    public static void identity(Show mypet, string color) 
    { 
        color = " Black" + color; 
        mypet(color); 
    } 
  
    // Main method 
    static public void Main() 
    { 
  
        // Here anonymous method pass as  
        // a parameter in identity method 
        identity(delegate(string color) {  
           Console.WriteLine("The color of my dog is {0}", color); }, "White"); 
    } 
} 



// C# program to illustrate how an  
// anonymous method use as a  
// event handler 
MyButton.Click += delegate(Object obj, EventArgs ev) 
{ 
    System.Windows.Forms.MessageBox.Show("Message..!!"); 
} 


using System;

delegate int NumberChanger(int n);
namespace DelegateAppl {
   
   class TestDelegate {
      static int num = 10;
      
      public static int AddNum(int p) {
         num += p;
         return num;
      }
      public static int MultNum(int q) {
         num *= q;
         return num;
      }
      public static int getNum() {
         return num;
      }
      static void Main(string[] args) {
         //tạo thể hiện delegate
         NumberChanger nc1 = new NumberChanger(AddNum);
         NumberChanger nc2 = new NumberChanger(MultNum);
         
         //gọi phương thức sử dụng đối tượng delegate
         nc1(25);
         Console.WriteLine("Giá trị của số: {0}", getNum());
         nc2(5);
         Console.WriteLine("Giá trị của số: {0}", getNum());
         Console.ReadKey();
      }
   }
}
